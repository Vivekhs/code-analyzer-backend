/**
 * 
 */
package com.hackathon.services.codeanalysis.impl;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.hackathon.dao.analysisreport.AnalysisReportDAO;
import com.hackathon.models.analysisreport.AnalysisReport;
import com.hackathon.models.analysisreport.CodeAnalysisTransaction;
import com.hackathon.models.analyzerproperties.AnalyzerProperties;
import com.hackathon.models.request.AnalyseCodeRequest;
import com.hackathon.services.codeanalysis.CodeAnalysisService;
import com.hackathon.services.storage.StorageService;
import com.hackathon.util.AppConstants;
import com.hackathon.util.CommonUtils;

/**
 * @author vivekhs
 *
 */

@Service
public class CodeAnalysisServiceImpl implements CodeAnalysisService {

    @Autowired
    private AnalysisReportDAO analysisReportDAO;

    @Autowired
    private AnalyzerProperties analyzerProps;

    @Autowired
    private StorageService storageService;

    public CodeAnalysisTransaction analyseCode(String userName, String filePath, String language)
            throws IOException, InterruptedException {
        String analysisOutDir = analyzerProps.getAnalysisOutDirectory() + userName;
        generateReport(analysisOutDir, filePath, language);
        storageService.deleteDirectory(analyzerProps.getCodesDirectory() + "/" + userName);
        CodeAnalysisTransaction codeAnalysisTransaction = getFormattedReport(analysisOutDir + "/report.json", userName);
        analysisReportDAO.save(codeAnalysisTransaction);
        storageService.deleteDirectory(analysisOutDir);
        return codeAnalysisTransaction;
    }

    /**
     * this will format the report generated by code analyzer
     * 
     * @param reportFilePath
     * @param userId
     * @return
     * @throws JsonParseException
     * @throws JsonMappingException
     * @throws IOException
     */
    private CodeAnalysisTransaction getFormattedReport(String reportFilePath, String userId)
            throws JsonParseException, JsonMappingException, IOException {

        ObjectMapper objectMapper = new ObjectMapper();
        CodeAnalysisTransaction codeAnalysisTransaction = new CodeAnalysisTransaction();
        AnalysisReport[] analysisReport = objectMapper.readValue(new File(reportFilePath), AnalysisReport[].class);
        codeAnalysisTransaction.setAnalysisReport(analysisReport);
        codeAnalysisTransaction.setCreatedTS(new Date());
        codeAnalysisTransaction.setTransactionId(CommonUtils.getUUID());
        codeAnalysisTransaction.setUserId(userId);

        return codeAnalysisTransaction;
    }

    /**
     * report generation and code analysis
     * 
     * @param analysisOutDir
     * @param filePath
     * @throws InterruptedException
     * @throws IOException
     */
    private void generateReport(String analysisOutDir, String filePath, String language)
            throws InterruptedException, IOException {
        String command = "";
        switch (language) {
        case AppConstants.LANG_C:
            command = analyzerProps.getInferCodeAnalyserPath() + " -o " + analysisOutDir + " run -- clang -c "
                    + filePath;
            break;
        case AppConstants.LANG_JAVA:
            command = analyzerProps.getInferCodeAnalyserPath() + " -o " + analysisOutDir + " run -- javac " + filePath;
            break;
        }

        Runtime.getRuntime().exec(command).waitFor();
    }

    /**
     * write code content into a file for code analysis
     * 
     * @param analyseCodeRequest
     * @throws IOException
     */
    @Override
    public String writeCodeInFile(AnalyseCodeRequest analyseCodeRequest) throws IOException {
        String codeDirectory = analyzerProps.getCodesDirectory() + analyseCodeRequest.getUserName();
        String fileName = analyseCodeRequest.getFileName();
        String filePath = codeDirectory + "/" + fileName;
        File file = new File(filePath);
        file.getParentFile().mkdir();
        file.createNewFile();
        PrintWriter out = new PrintWriter(filePath);
        out.println(analyseCodeRequest.getContent());
        out.close();
        return filePath;
    }

}
